{"version":3,"sources":["components/main/styles.module.css","components/memeForm/styles.module.css","components/HOC/aux.js","components/memeForm/memeForm.jsx","components/memeCard/memeCard.jsx","components/memeList/memeList.jsx","components/common/navbar/navbar.jsx","components/main/main.jsx","App.js","reportWebVitals.js","index.js","components/memeCard/styles.module.css"],"names":["module","exports","aux","props","children","MemeForm","useState","memeOwner","setMemeOwner","caption","setMemeCaption","memeUrl","setmemeUrl","setValue","event","target","name","value","Form","className","classes","Field","modal","onChange","placeholder","Button","onClick","showModal","type","postData","url","editMeme","validation","message","error","submitMeme","memeCard","id","Card","Content","Icon","Header","header","charAt","toUpperCase","slice","editIcon","Meta","toLowerCase","Image","src","image","wrapped","ui","Description","MemeList","firstHundredMemes","Grid","width","length","map","meme","e","navbar","Menu","fixed","inverted","Item","onToggle","position","Main","state","loading","editMemeID","checkValidation","response","fetchFirstHundredMemes","fetch","encodeURI","then","res","json","setState","catch","err","console","log","a","method","headers","body","JSON","stringify","status","success","resJSON","this","items","container","memeListContainer","Modal","dimmer","open","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6660bfce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"styles_mainContainer__1V_-R\",\"container\":\"styles_container__2SgF2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__1hqYg\",\"ui\":\"styles_ui__310-4\"};","const aux = (props) => props.children;\n\nexport default aux;\n","import { Button, Form, Message } from \"semantic-ui-react\";\nimport { React, useState } from \"react\";\nimport classes from \"./styles.module.css\";\nimport { message } from \"antd\";\nimport Aux from \"../HOC/aux\";\n\nconst MemeForm = (props) => {\n  /**\n   * @property {string} memeOwner\n   * stores the value of memeOwner on change in input box\n   * @property {string} caption\n   * caption is stored in caption variable onchange\n   * @property {string} memeUrl\n   */\n  const [memeOwner, setMemeOwner] = useState(\"\");\n  const [caption, setMemeCaption] = useState(\"\");\n  const [memeUrl, setmemeUrl] = useState(\"\");\n\n  const setValue = (event) => {\n    switch (event.target.name) {\n      case \"owner\":\n        setMemeOwner(event.target.value);\n        break;\n      case \"caption\":\n        setMemeCaption(event.target.value);\n        break;\n      case \"url\":\n        setmemeUrl(event.target.value);\n        break;\n    }\n  };\n\n  /**\n   *\n   * @param {boolean} error\n   * boolean value to store the error flag of API call\n   * @param {object} response\n   * Input response to check validation\n   */\n  const checkValidation = (error, response) => {\n    if (!error) {\n      return true;\n    }\n  };\n\n  /**\n   * Clear all the input values on submit\n   */\n\n  const clearValues = () => {\n    setMemeOwner(\"\");\n    setMemeCaption(\"\");\n    setmemeUrl(\"\");\n  };\n\n  const formValidation = () => {\n    if (memeOwner !== \"\" && memeUrl != \"\" && caption != \"\") {\n      return true;\n    } else {\n      message.error(\"All fields are mandatory. Please check again and submit\");\n\n      return false;\n    }\n  };\n\n  const editMeme = ()=>{\n    let postData = { name: memeOwner, url: memeUrl, caption: caption };\n    props.editMeme(postData);\n  }\n  /**\n   * Submit the meme on Submit button to backend\n   */\n  const submitMeme = () => {\n    let validation = formValidation();\n\n    let postData = { name: memeOwner, url: memeUrl, caption: caption };\n    if (validation) {\n      props.submitMeme(postData);\n    }\n\n    clearValues();\n  };\n  return (\n    <Form className={classes[\"form\"]}>\n      <Form.Field>\n        {!props.modal ? (\n          <Aux>\n            {\" \"}\n            <label>Meme Owner</label>{\" \"}\n            <input\n              value={memeOwner}\n              name=\"owner\"\n              onChange={setValue}\n              placeholder=\"Enter your full name\"\n            />{\" \"}\n          </Aux>\n        ) : (\n          \"\"\n        )}\n      </Form.Field>\n      <Form.Field>\n        <label>Caption</label>\n        <input\n          value={caption}\n          name=\"caption\"\n          onChange={setValue}\n          placeholder=\"Be Creative with caption\"\n        />\n      </Form.Field>\n      <Form.Field>\n        <label>Meme URL</label>\n        <input\n          value={memeUrl}\n          name=\"url\"\n          onChange={setValue}\n          placeholder=\"Enter URL of your meme here\"\n        />\n      </Form.Field>\n      {props.modal ? (\n        <Aux>\n          <Button onClick={() => props.showModal(false)} type=\"cancel\">\n            {\" \"}\n            Cancel{\" \"}\n          </Button>{\" \"}\n        </Aux>\n      ) : (\n        \"\"\n      )}\n      <Button onClick={props.modal ?editMeme:submitMeme} type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n  );\n};\n\nexport default MemeForm;\n","import React from \"react\";\nimport { Card, Image, Icon } from \"semantic-ui-react\";\nimport classes from \"./styles.module.css\";\n\nconst memeCard = (props) => {\n  return (\n    <div id={props.id} className={classes[\"memeCard\"]}>\n      <Card>\n        <Card.Content>\n\n          <div>\n            <Icon name=\"user outline\" />{\" \"}\n            <Card.Header className={classes.header}>\n              {props.name.charAt(0).toUpperCase() + props.name.slice(1)}\n            </Card.Header>\n          <div onClick={props.showModal} className={classes.editIcon}>\n          <Icon id={props.id} name='edit outline' />   \n          </div>\n          </div>\n\n          <Card.Meta>\n            @{props.name.charAt(0).toLowerCase() + props.name.slice(1)}\n          </Card.Meta>\n        </Card.Content>\n        <div className={classes[\"cardImageContainer\"]}>\n          <Image\n            className={classes[\"cardImage\"]}\n            src={props.image}\n            wrapped\n            ui={false}\n          />\n        </div>\n        <Card.Content>\n          <Card.Description>{props.caption}</Card.Description>\n        </Card.Content>\n      </Card>\n    </div>\n  );\n};\n\nexport default memeCard;\n","import React, { useEffect, useState } from 'react';\nimport {Grid} from 'semantic-ui-react';\nimport MemeCard from '../memeCard/memeCard';\n\n\n\nconst MemeList = (props)=>{\n\n    const {firstHundredMemes} = props;\n    return(\n        \n        <Grid  width={16} >  \n        \n       { firstHundredMemes.length > 0 ? firstHundredMemes.map((meme)=>(\n        \n       \n       <MemeCard showModal = {(e)=>props.showModal(e,true)} id={meme.id} image={meme.url} name={meme.name} caption={meme.caption} />\n    \n       )) :''}\n       \n        </Grid>\n\n    )\n\n}\n\nexport default MemeList;\n\n\n","import React from 'react';\nimport {\n    Container,\n    Icon,\n    Image,\n    Menu,\n    Sidebar,\n    Responsive\n  } from \"semantic-ui-react\";\n\n\nconst navbar = (props)=>{\n\n    return(\n\n        <Menu fixed=\"top\" inverted>\n        <Menu.Item>\n          XMeme\n        </Menu.Item>\n        <Menu.Item onClick={props.onToggle}>\n         \n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n          {/* {props.items.map(props.rightItems, item => <Menu.Item {...item} />)} */}\n        </Menu.Menu>\n      </Menu>\n\n    )\n\n\n\n}\n\nexport default navbar;","import React from \"react\";\nimport MemeCard from \"../memeCard/memeCard\";\nimport MemeList from \"../memeList/memeList\";\nimport MemeForm from \"../memeForm/memeForm\";\nimport { Modal } from \"semantic-ui-react\";\nimport classes from \"./styles.module.css\";\nimport Navbar from \"../common/navbar/navbar\";\nimport { message } from \"antd\";\n\nclass Main extends React.Component {\n  /**\n   * @property {boolean} state.loading\n   * Indicates the state of application side effects/API calls\n   * @property {array} state.firstHundredMemes\n   * First Hundred memes will be set to this\n   */\n\n  state = {\n    loading: false,\n    firstHundredMemes: null,\n    showModal: false,\n    editMemeID: \"\",\n  };\n  /**\n   *\n   * @param {boolean} error\n   * Boolean value indicating whether any error during the web service call\n   * @param {object} response\n   * Response from the web service\n   */\n  checkValidation = (error, response) => {\n    if (!error) {\n      return true;\n    }\n  };\n  /**\n   * Loading on the initial mount of component\n   */\n  componentDidMount() {\n    this.fetchFirstHundredMemes();\n  }\n  /**\n   * API call to fetch first 100 memes\n   */\n\n  fetchFirstHundredMemes = () => {\n    fetch(encodeURI(`https://xmemeapps.herokuapp.com/memes`))\n      .then((res) => {\n        return res.json();\n      })\n      .then((response) => {\n        this.setState({ firstHundredMemes: response });\n      })\n      .catch((err) => {\n        console.log(`Error occured during fetch ${err}`);\n      });\n  };\n  /**\n   *\n   * @param {boolean} showModal\n   * boolean value to show modal or not\n   */\n  showModal = (event, showModal) => {\n    showModal\n      ? this.setState({ showModal: true, editMemeID: event.target.id })\n      : this.setState({ showModal: false, editMemeID: \"\" });\n  };\n\n  editMeme = async (postData) => {\n    console.log(postData);\n    console.log(this.state.editMemeID);\n\n    this.setState({ loading: true });\n\n    try {\n\n      const updateMeme = await fetch(\n        encodeURI(`https://xmemeapps.herokuapp.com/memes/${this.state.editMemeID}`),\n        {\n          method: \"PATCH\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({url:postData.url, caption:postData.caption}),\n        }\n      )\n      .then((res)=>{\n          if(res.status===200){\n            message.success(\"Meme Update succesful\")\n          } else if(res.status >400){\n            message.error(\"Unable to update meme\")\n          }\n      })\n      \n    } catch (error) {\n      message.error(\"Error accured during API\")\n    }\n    this.fetchFirstHundredMemes();\n    this.showModal(false, '');\n  };\n\n  /**\n   *\n   * @param {object} postData\n   * gets the data to be sent to backend\n   */\n  submitMeme = async (postData) => {\n    this.setState({ loading: true });\n\n    const memes = await fetch(encodeURI(`https://xmemeapps.herokuapp.com/memes`), {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(postData),\n    })\n      .then((res) => {\n        return res.json();\n      })\n      .then((resJSON) => {\n        let valResult = this.checkValidation(false, resJSON);\n        if (valResult) {\n          // clearValues()\n\n          return resJSON;\n        }\n      })\n      .catch((err) => {\n        this.setState({ loading: false });\n        console.log(`Error occured during fetch api`);\n      });\n    this.fetchFirstHundredMemes();\n  };\n\n  render() {\n    return (\n      <div className={classes[\"mainContainer\"]}>\n        <Navbar items={[\"Login\", \"Register\"]} />\n        <div className={classes.container}>\n          <MemeForm submitMeme={this.submitMeme} />\n          <div className={classes.memeListContainer}>\n            {this.state.firstHundredMemes ? (\n              <MemeList\n                showModal={this.showModal}\n                firstHundredMemes={this.state.firstHundredMemes}\n              />\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n        <Modal dimmer={true} open={this.state.showModal}>\n          <MemeForm\n            editMeme={this.editMeme}\n            showModal={this.showModal}\n            modal={true}\n            submitMeme={this.submitMeme}\n          />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import MemeForm from './components/memeForm/memeForm';\nimport 'semantic-ui-css/semantic.min.css'\nimport MemeList from './components/memeList/memeList';\nimport Main from './components/main/main';\nimport 'antd/dist/antd.css'; \nimport './App.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"memeCard\":\"styles_memeCard__17EJQ\",\"cardImageContainer\":\"styles_cardImageContainer__1fkyQ\",\"cardImage\":\"styles_cardImage__1r0kH\",\"header\":\"styles_header__3nVxg\",\"editIcon\":\"styles_editIcon__2NTWJ\"};"],"sourceRoot":""}