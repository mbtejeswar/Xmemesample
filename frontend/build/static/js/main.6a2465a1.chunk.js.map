{"version":3,"sources":["components/main/styles.module.css","components/memeForm/styles.module.css","components/memeForm/memeForm.jsx","components/memeCard/memeCard.jsx","components/memeList/memeList.jsx","components/common/navbar/navbar.jsx","components/main/main.jsx","App.js","reportWebVitals.js","index.js","components/memeCard/styles.module.css"],"names":["module","exports","MemeForm","props","useState","memeOwner","setMemeOwner","caption","setMemeCaption","memeUrl","setmemeUrl","setValue","event","target","name","value","Form","className","classes","Field","onChange","placeholder","Message","warning","header","list","Button","onClick","validation","message","error","postData","url","submitMeme","type","memeCard","Card","Content","Icon","Header","charAt","toUpperCase","slice","Meta","toLowerCase","Image","src","image","wrapped","ui","Description","MemeList","firstHundredMemes","Grid","width","length","map","meme","navbar","Menu","fixed","inverted","Item","onToggle","position","Main","state","loading","checkValidation","response","fetchFirstHundredMemes","fetch","encodeURI","then","res","json","setState","catch","err","console","log","a","method","headers","body","JSON","stringify","resJSON","this","items","container","memeListContainer","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a2465a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"styles_mainContainer__1V_-R\",\"container\":\"styles_container__2SgF2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__1hqYg\"};","import { Button, Form , Message} from \"semantic-ui-react\";\nimport { React, useState } from \"react\";\nimport classes from './styles.module.css';\nimport {message} from 'antd'\n\n\n\nconst MemeForm = (props) => {\n  /**\n   * @property {string} memeOwner\n   * stores the value of memeOwner on change in input box\n   * @property {string} caption\n   * caption is stored in caption variable onchange\n   * @property {string} memeUrl \n   */\n  const [memeOwner, setMemeOwner] = useState(\"\");\n  const [caption, setMemeCaption] = useState(\"\");\n  const [memeUrl, setmemeUrl] = useState(\"\");\n\n  const setValue = (event) => {\n    switch (event.target.name) {\n      case \"owner\":\n        setMemeOwner(event.target.value);\n        break;\n      case \"caption\":\n        setMemeCaption(event.target.value);\n        break;\n      case \"url\":\n        setmemeUrl(event.target.value);\n        break;\n    }\n  };\n\n  /**\n   * \n   * @param {boolean} error \n   * boolean value to store the error flag of API call \n   * @param {object} response \n   * Input response to check validation\n   */\n  const checkValidation = (error, response)=>{\n    if(!error){\n      return true\n    }\n  }\n\n  /**\n   * Clear all the input values on submit\n   */\n\n  const clearValues = ()=>{\n    setMemeOwner('')\n    setMemeCaption('')\n    setmemeUrl('')\n  }\n\n  const formValidation =()=>{\n    if(memeOwner!==\"\" && memeUrl!=\"\" && caption!=\"\"){\n      return true \n    } else {\n      message.error('All fields are mandatory. Please check again and submit')\n    \n      return false\n    };\n  }\n  /**\n   * Submit the meme on Submit button to backend\n   */\n  const submitMeme = () => {\n    let validation = formValidation();\n    \n    let postData = {name:memeOwner, url:memeUrl,caption:caption}\n    if(validation){\n      props.submitMeme(postData);\n    }\n    \n    clearValues();\n  };\n  return (\n    <Form className={classes['form']}>\n  \n      <Form.Field>\n        <label>Meme Owner</label>\n        <input\n          value={memeOwner}\n          name=\"owner\"\n          onChange={setValue}\n          placeholder=\"Enter your full name\"\n        />\n        \n      </Form.Field>\n      <Form.Field>\n        <label>Caption</label>\n        <input\n          value={caption}\n          name=\"caption\"\n          onChange={setValue}\n          placeholder=\"Be Creative with caption\"\n        />\n      </Form.Field>\n      <Form.Field>\n        <label>Meme URL</label>\n        <input\n          value={memeUrl}\n          name=\"url\"\n          onChange={setValue}\n          placeholder=\"Enter URL of your meme here\"\n        />\n      </Form.Field>\n      <Message\n      warning\n      header='Could you check something!'\n      list={[\n        'That e-mail has been subscribed, but you have not yet clicked the verification link in your e-mail.',\n      ]}\n    />\n      <Button onClick={submitMeme} type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n  );\n};\n\nexport default MemeForm;\n","import React from \"react\";\nimport { Card, Image, Icon } from \"semantic-ui-react\";\nimport classes from \"./styles.module.css\";\n\nconst memeCard = (props) => {\n  return (\n    <div className={classes[\"memeCard\"]}>\n      <Card>\n        <Card.Content>\n          <div>\n            <Icon name=\"user outline\" />{\" \"}\n            <Card.Header className={classes.header}>\n              {props.name.charAt(0).toUpperCase() + props.name.slice(1)}\n            </Card.Header>\n          </div>\n\n          <Card.Meta>\n            @{props.name.charAt(0).toLowerCase() + props.name.slice(1)}\n          </Card.Meta>\n        </Card.Content>\n        <div className={classes[\"cardImageContainer\"]}>\n          <Image\n            className={classes[\"cardImage\"]}\n            src={props.image}\n            wrapped\n            ui={false}\n          />\n        </div>\n        <Card.Content>\n          <Card.Description>{props.caption}</Card.Description>\n        </Card.Content>\n      </Card>\n    </div>\n  );\n};\n\nexport default memeCard;\n","import React, { useEffect, useState } from 'react';\nimport {Grid} from 'semantic-ui-react';\nimport MemeCard from '../memeCard/memeCard';\n\n\n\nconst MemeList = (props)=>{\n\n    const {firstHundredMemes} = props;\n\n\n\n    return(\n        \n        <Grid  width={16} >  \n        \n       { firstHundredMemes.length > 0 ? firstHundredMemes.map((meme)=>(\n        \n       \n       <MemeCard image={meme.url} name={meme.name} caption={meme.caption} />\n    \n       )) :''}\n       \n        </Grid>\n\n    )\n\n}\n\nexport default MemeList;\n\n\n","import React from 'react';\nimport {\n    Container,\n    Icon,\n    Image,\n    Menu,\n    Sidebar,\n    Responsive\n  } from \"semantic-ui-react\";\n\n\nconst navbar = (props)=>{\n\n    return(\n\n        <Menu fixed=\"top\" inverted>\n        <Menu.Item>\n          XMeme\n        </Menu.Item>\n        <Menu.Item onClick={props.onToggle}>\n         \n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n          {/* {props.items.map(props.rightItems, item => <Menu.Item {...item} />)} */}\n        </Menu.Menu>\n      </Menu>\n\n    )\n\n\n\n}\n\nexport default navbar;","import React from \"react\";\nimport MemeCard from \"../memeCard/memeCard\";\nimport MemeList from \"../memeList/memeList\";\nimport MemeForm from \"../memeForm/memeForm\";\nimport { Container } from \"semantic-ui-react\";\nimport classes from \"./styles.module.css\";\nimport Navbar from \"../common/navbar/navbar\";\n\nclass Main extends React.Component {\n  /**\n   * @property {boolean} state.loading\n   * Indicates the state of application side effects/API calls\n   * @property {array} state.firstHundredMemes\n   * First Hundred memes will be set to this\n   */\n\n  state = {\n    loading: false,\n    firstHundredMemes: null,\n  };\n  /**\n   *\n   * @param {boolean} error\n   * Boolean value indicating whether any error during the web service call\n   * @param {object} response\n   * Response from the web service\n   */\n  checkValidation = (error, response) => {\n    if (!error) {\n      return true;\n    }\n  };\n  /**\n   * Loading on the initial mount of component\n   */\n  componentDidMount() {\n    this.fetchFirstHundredMemes();\n  }\n  /**\n   * API call to fetch first 100 memes\n   */\n\n  fetchFirstHundredMemes = () => {\n    fetch(encodeURI(`https://xmemeapps.herokuapp.com/memes`))\n      .then((res) => {\n        return res.json();\n      })\n      .then((response) => {\n        this.setState({ firstHundredMemes: response });\n      })\n      .catch((err) => {\n        console.log(`Error occured during fetch ${err}`);\n      });\n  };\n\n  /**\n   *\n   * @param {object} postData\n   * gets the data to be sent to backend\n   */\n  submitMeme = async (postData) => {\n    this.setState({ loading: true });\n\n    const memes = await fetch(encodeURI(`https://xmemeapps.herokuapp.com/memes`), {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(postData),\n    })\n      .then((res) => {\n        return res.json();\n      })\n      .then((resJSON) => {\n        let valResult = this.checkValidation(false, resJSON);\n        if (valResult) {\n          // clearValues()\n\n          return resJSON;\n        }\n      })\n      .catch((err) => {\n        this.setState({ loading: false });\n        console.log(`Error occured during fetch api`);\n      });\n    this.fetchFirstHundredMemes();\n  };\n\n  render() {\n    return (\n      <div className={classes[\"mainContainer\"]}>\n        <Navbar items={[\"Login\", \"Register\"]} />\n        <div className={classes.container}>\n          <MemeForm submitMeme={this.submitMeme} />\n          <div className={classes.memeListContainer}>\n            {this.state.firstHundredMemes ? (\n              <MemeList firstHundredMemes={this.state.firstHundredMemes} />\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import MemeForm from './components/memeForm/memeForm';\nimport 'semantic-ui-css/semantic.min.css'\nimport MemeList from './components/memeList/memeList';\nimport Main from './components/main/main';\nimport 'antd/dist/antd.css'; \nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"memeCard\":\"styles_memeCard__17EJQ\",\"cardImageContainer\":\"styles_cardImageContainer__1fkyQ\",\"cardImage\":\"styles_cardImage__1r0kH\",\"header\":\"styles_header__3nVxg\"};"],"sourceRoot":""}